//
// Copyright 2023 The Chainloop Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package controlplane.v1;

import "controlplane/v1/response_messages.proto";
import "validate/validate.proto";

option go_package = "github.com/chainloop-dev/chainloop/app/controlplane/api/controlplane/v1;v1";

service OrgMetricsService {
  rpc Totals(OrgMetricsServiceTotalsRequest) returns (OrgMetricsServiceTotalsResponse);
  rpc TopWorkflowsByRunsCount(TopWorkflowsByRunsCountRequest) returns (TopWorkflowsByRunsCountResponse);
  rpc WorkflowRunsPerDay(WorkflowRunsPerDayRequest) returns (WorkflowRunsPerDayResponse);
}

message WorkflowRunsPerDayRequest {
  MetricsTimeWindow time_window = 1 [(validate.rules).enum = {
    not_in: [0]
  }];

  string workflow_id = 2 [(validate.rules).string.uuid = true];
}

message WorkflowRunsPerDayResponse {
  repeated TotalByDay result = 1;

  message TotalByDay {
    WorkflowItem workflow = 1;
    // [day]: runs: { initialized: 0, error: 0 , success: 100 ]
    map<string, RunsTotalByStatus> runs_total_by_status = 2;
  }

  message RunsTotalByStatus {
    map<string, int32> runs = 1;
  }
}

message OrgMetricsServiceTotalsRequest {
  MetricsTimeWindow time_window = 1 [(validate.rules).enum = {
    not_in: [0]
  }];
}

message TopWorkflowsByRunsCountRequest {
  // top x number of runs to return
  int32 num_workflows = 1 [(validate.rules).int32 = {
    gte: 1,
    lte: 20
  }];
  MetricsTimeWindow time_window = 2 [(validate.rules).enum = {
    not_in: [0]
  }];
}

message TopWorkflowsByRunsCountResponse {
  repeated TotalByStatus result = 1;

  message TotalByStatus {
    WorkflowItem workflow = 1;
    // Status -> [initialized, error, success]
    map<string, int32> runs_total_by_status = 2;
  }
}

message OrgMetricsServiceTotalsResponse {
  Result result = 1;

  message Result {
    int32 runs_total = 1;
    // Status -> [initialized, error, success]
    map<string, int32> runs_total_by_status = 2;
    // runner_type -> [generic, github_action, ...]
    map<string, int32> runs_total_by_runner_type = 3;
  }
}

enum MetricsTimeWindow {
  METRICS_TIME_WINDOW_UNSPECIFIED = 0;
  METRICS_TIME_WINDOW_LAST_30_DAYS = 1;
  METRICS_TIME_WINDOW_LAST_7_DAYS = 2;
  METRICS_TIME_WINDOW_LAST_DAY = 3;
}
